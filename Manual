			Comando FORK:

			Se usa para copiar el repositorio en tu propio repositorio.





			Comando GIT INIT:			

			Para crear un repositorio nuevo, creamos previamente un directorio nuevo,
			y una vez dentro ejecutamos el comando siguiente:

	Comando: 	git init
			
			
			Comando GIT BRANCH

			Se utiliza para crear una rama. 
			
	Comando:	git branch <nombre-rama>

			Para cambiarnos a la rama que acabamos de crear hacemos el siguiente comando.

	Comando:	git checkout <nombre-rama>

			Para crear una rama y cambiarnos directamente a la rama que acabmos de crear
			podemos usar el comando siguiente.

	Comando:	git checkout -b <nombre-rama>

				
			Comando GIT CLONE

			Se utiliza para crear una copia local del repositorio.

	Comando:	git clone /repositorio/


			En el caso de que sea un servidor remoto, usaremos el siguiente comando.

	Comando:	git clone username@host:/repositorio

			


			Directorio de trabajo.

			Git divide el repositorio local en 3 " arboles " diferentes:

		Directorio de trabajo: Contiene los archivos de nuestro repositorio.
		Index: La zona intermedia.
		Head: Apunta al último commit que hemos realizado.

			

			Comando ADD y COMMIT

			Se usa ADD  para añadir los cambios al arbol Index, para ello utilizamos el
			comando:

	Comando:	git add <nombredelarchivo>
				

			Se usa COMMIT para guardar cambios.
	
			
	Comando: 	git commit -m "mensaje del commit "



			Comando PUSH

			Se usa para enviar los cambios del arbol Head -> Al repositorio remoto.

	Comando: 	git push origin NombreDeLaRama



			Comandos PULL y MERGE
		

			Comando PULL

			Se utiliza para actualizar el repositorio local al commit mas nuevo.

	Comando:	git pull

		
			Comando MERGE
			
			Se utiliza para fusionar otra rama a tu rama activa.

	Comando:	git merge NombreDeLaRama

			


			Comando REBASE

			Se utiliza para asociar una serie de commits.

	Comando: 	git rebase -i Rama/HASH
			

			Git intetnara fusionarlos automáticamente, no siempre será posible y habra
			conflictos. Si sucede esto, tendremos que modificar los archivos que el 
			propio GIT nos dirá. Una vez modificados, tendremos que añadirlos con el
			comando "git add nombreDelArchivo".


			Para revisar los cambios antes de fusionar, se puede utilizar el siguiente
			comando.


	Comando:	git diff RamaActual RamaALaQueQueremosUnir





			Comando STATUS

			Sirve para ver el estado del directorio de trabajo.

	Comando:	git status






			

			PARA REEMPLAZAR CAMBIOS LOCALES

			Si nos surge esta necesidad, podemos reemplazar los cambios locales usando
			el comando "git checkout -- NombreDelArchivo".

			Este comando reemplaza los cambios en el directorio de trabajo con el ultimo
			contenido del HEAD. Los que hayan sido añadidos al index, o los archivos
			nuevos, se conservaran sin cambios.


			En el caso de que quieras deshacer todos los cambios locales y commits,
			puedes traer la última versión del servidor y apuntar a tu copia local
			principal con el comando siguiente.


	Comando:	git fecth origin

			git reset --hard origin/master


		


		
				


			COMANDOS UTILES

	
	
			Comando GITK

			Es la interfaz gráfica de git.


	Comando: 	gitk



			Comando CONFIG

			Es el comando para configurar git. Algún ejemplo:

			Mostrar sólo una línea por cada commit en la traza.

	Comando:	git config format.pretty oneline

		
			Configurar tu nombre y tu email.

			Nombre:

	Comando: 	git config --global user.name NombreUsuario


			Email:

	Comando:	git config --global user.email DireccionEmail@email.com



			Comando CONFIG HELP

			Ayuda con los comandos de config.


	Comando:	git config --help













